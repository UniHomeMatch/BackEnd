
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Imobi
 * 
 */
export type Imobi = $Result.DefaultSelection<Prisma.$ImobiPayload>
/**
 * Model Genero
 * 
 */
export type Genero = $Result.DefaultSelection<Prisma.$GeneroPayload>
/**
 * Model Mensagem
 * 
 */
export type Mensagem = $Result.DefaultSelection<Prisma.$MensagemPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.imobi`: Exposes CRUD operations for the **Imobi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Imobis
    * const imobis = await prisma.imobi.findMany()
    * ```
    */
  get imobi(): Prisma.ImobiDelegate<ExtArgs>;

  /**
   * `prisma.genero`: Exposes CRUD operations for the **Genero** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Generos
    * const generos = await prisma.genero.findMany()
    * ```
    */
  get genero(): Prisma.GeneroDelegate<ExtArgs>;

  /**
   * `prisma.mensagem`: Exposes CRUD operations for the **Mensagem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mensagems
    * const mensagems = await prisma.mensagem.findMany()
    * ```
    */
  get mensagem(): Prisma.MensagemDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.0
   * Query Engine version: 5fe21811a6ba0b952a3bc71400666511fe3b902f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Imobi: 'Imobi',
    Genero: 'Genero',
    Mensagem: 'Mensagem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "imobi" | "genero" | "mensagem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Imobi: {
        payload: Prisma.$ImobiPayload<ExtArgs>
        fields: Prisma.ImobiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImobiFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImobiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImobiFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImobiPayload>
          }
          findFirst: {
            args: Prisma.ImobiFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImobiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImobiFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImobiPayload>
          }
          findMany: {
            args: Prisma.ImobiFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImobiPayload>[]
          }
          create: {
            args: Prisma.ImobiCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImobiPayload>
          }
          createMany: {
            args: Prisma.ImobiCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ImobiDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImobiPayload>
          }
          update: {
            args: Prisma.ImobiUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImobiPayload>
          }
          deleteMany: {
            args: Prisma.ImobiDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImobiUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ImobiUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImobiPayload>
          }
          aggregate: {
            args: Prisma.ImobiAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImobi>
          }
          groupBy: {
            args: Prisma.ImobiGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImobiGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImobiCountArgs<ExtArgs>
            result: $Utils.Optional<ImobiCountAggregateOutputType> | number
          }
        }
      }
      Genero: {
        payload: Prisma.$GeneroPayload<ExtArgs>
        fields: Prisma.GeneroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          findFirst: {
            args: Prisma.GeneroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          findMany: {
            args: Prisma.GeneroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>[]
          }
          create: {
            args: Prisma.GeneroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          createMany: {
            args: Prisma.GeneroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GeneroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          update: {
            args: Prisma.GeneroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          deleteMany: {
            args: Prisma.GeneroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GeneroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          aggregate: {
            args: Prisma.GeneroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGenero>
          }
          groupBy: {
            args: Prisma.GeneroGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneroGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneroCountArgs<ExtArgs>
            result: $Utils.Optional<GeneroCountAggregateOutputType> | number
          }
        }
      }
      Mensagem: {
        payload: Prisma.$MensagemPayload<ExtArgs>
        fields: Prisma.MensagemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MensagemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MensagemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          findFirst: {
            args: Prisma.MensagemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MensagemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          findMany: {
            args: Prisma.MensagemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>[]
          }
          create: {
            args: Prisma.MensagemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          createMany: {
            args: Prisma.MensagemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MensagemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          update: {
            args: Prisma.MensagemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          deleteMany: {
            args: Prisma.MensagemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MensagemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MensagemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPayload>
          }
          aggregate: {
            args: Prisma.MensagemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMensagem>
          }
          groupBy: {
            args: Prisma.MensagemGroupByArgs<ExtArgs>
            result: $Utils.Optional<MensagemGroupByOutputType>[]
          }
          count: {
            args: Prisma.MensagemCountArgs<ExtArgs>
            result: $Utils.Optional<MensagemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    imobi: number
    mensagem: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    imobi?: boolean | UserCountOutputTypeCountImobiArgs
    mensagem?: boolean | UserCountOutputTypeCountMensagemArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountImobiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImobiWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMensagemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MensagemWhereInput
  }


  /**
   * Count Type GeneroCountOutputType
   */

  export type GeneroCountOutputType = {
    users: number
    Imobi: number
  }

  export type GeneroCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | GeneroCountOutputTypeCountUsersArgs
    Imobi?: boolean | GeneroCountOutputTypeCountImobiArgs
  }

  // Custom InputTypes
  /**
   * GeneroCountOutputType without action
   */
  export type GeneroCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneroCountOutputType
     */
    select?: GeneroCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GeneroCountOutputType without action
   */
  export type GeneroCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * GeneroCountOutputType without action
   */
  export type GeneroCountOutputTypeCountImobiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImobiWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    generoId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    generoId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    cpf: string | null
    birthdate: Date | null
    generoId: number | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cpf: string | null
    birthdate: Date | null
    generoId: number | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    cpf: number
    birthdate: number
    generoId: number
    email: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    generoId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    generoId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    birthdate?: true
    generoId?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    birthdate?: true
    generoId?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    birthdate?: true
    generoId?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    cpf: string
    birthdate: Date
    generoId: number
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cpf?: boolean
    birthdate?: boolean
    generoId?: boolean
    email?: boolean
    password?: boolean
    genero?: boolean | GeneroDefaultArgs<ExtArgs>
    imobi?: boolean | User$imobiArgs<ExtArgs>
    mensagem?: boolean | User$mensagemArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    cpf?: boolean
    birthdate?: boolean
    generoId?: boolean
    email?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    genero?: boolean | GeneroDefaultArgs<ExtArgs>
    imobi?: boolean | User$imobiArgs<ExtArgs>
    mensagem?: boolean | User$mensagemArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      genero: Prisma.$GeneroPayload<ExtArgs>
      imobi: Prisma.$ImobiPayload<ExtArgs>[]
      mensagem: Prisma.$MensagemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      cpf: string
      birthdate: Date
      generoId: number
      email: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    genero<T extends GeneroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GeneroDefaultArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    imobi<T extends User$imobiArgs<ExtArgs> = {}>(args?: Subset<T, User$imobiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "findMany"> | Null>
    mensagem<T extends User$mensagemArgs<ExtArgs> = {}>(args?: Subset<T, User$mensagemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly cpf: FieldRef<"User", 'String'>
    readonly birthdate: FieldRef<"User", 'DateTime'>
    readonly generoId: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.imobi
   */
  export type User$imobiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    where?: ImobiWhereInput
    orderBy?: ImobiOrderByWithRelationInput | ImobiOrderByWithRelationInput[]
    cursor?: ImobiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImobiScalarFieldEnum | ImobiScalarFieldEnum[]
  }

  /**
   * User.mensagem
   */
  export type User$mensagemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    where?: MensagemWhereInput
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    cursor?: MensagemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MensagemScalarFieldEnum | MensagemScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Imobi
   */

  export type AggregateImobi = {
    _count: ImobiCountAggregateOutputType | null
    _avg: ImobiAvgAggregateOutputType | null
    _sum: ImobiSumAggregateOutputType | null
    _min: ImobiMinAggregateOutputType | null
    _max: ImobiMaxAggregateOutputType | null
  }

  export type ImobiAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    generoId: number | null
  }

  export type ImobiSumAggregateOutputType = {
    id: number | null
    userId: number | null
    generoId: number | null
  }

  export type ImobiMinAggregateOutputType = {
    id: number | null
    userId: number | null
    thumb: string | null
    images: string | null
    predio: string | null
    description: string | null
    price: string | null
    cep: string | null
    logradouro: string | null
    bairro: string | null
    numero: string | null
    complemento: string | null
    cidade: string | null
    uf: string | null
    area: string | null
    bedrooms: string | null
    bathrooms: string | null
    name: string | null
    phone: string | null
    email: string | null
    generoId: number | null
    slug: string | null
    created_at: Date | null
  }

  export type ImobiMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    thumb: string | null
    images: string | null
    predio: string | null
    description: string | null
    price: string | null
    cep: string | null
    logradouro: string | null
    bairro: string | null
    numero: string | null
    complemento: string | null
    cidade: string | null
    uf: string | null
    area: string | null
    bedrooms: string | null
    bathrooms: string | null
    name: string | null
    phone: string | null
    email: string | null
    generoId: number | null
    slug: string | null
    created_at: Date | null
  }

  export type ImobiCountAggregateOutputType = {
    id: number
    userId: number
    thumb: number
    images: number
    predio: number
    description: number
    price: number
    cep: number
    logradouro: number
    bairro: number
    numero: number
    complemento: number
    cidade: number
    uf: number
    area: number
    bedrooms: number
    bathrooms: number
    name: number
    phone: number
    email: number
    generoId: number
    slug: number
    created_at: number
    _all: number
  }


  export type ImobiAvgAggregateInputType = {
    id?: true
    userId?: true
    generoId?: true
  }

  export type ImobiSumAggregateInputType = {
    id?: true
    userId?: true
    generoId?: true
  }

  export type ImobiMinAggregateInputType = {
    id?: true
    userId?: true
    thumb?: true
    images?: true
    predio?: true
    description?: true
    price?: true
    cep?: true
    logradouro?: true
    bairro?: true
    numero?: true
    complemento?: true
    cidade?: true
    uf?: true
    area?: true
    bedrooms?: true
    bathrooms?: true
    name?: true
    phone?: true
    email?: true
    generoId?: true
    slug?: true
    created_at?: true
  }

  export type ImobiMaxAggregateInputType = {
    id?: true
    userId?: true
    thumb?: true
    images?: true
    predio?: true
    description?: true
    price?: true
    cep?: true
    logradouro?: true
    bairro?: true
    numero?: true
    complemento?: true
    cidade?: true
    uf?: true
    area?: true
    bedrooms?: true
    bathrooms?: true
    name?: true
    phone?: true
    email?: true
    generoId?: true
    slug?: true
    created_at?: true
  }

  export type ImobiCountAggregateInputType = {
    id?: true
    userId?: true
    thumb?: true
    images?: true
    predio?: true
    description?: true
    price?: true
    cep?: true
    logradouro?: true
    bairro?: true
    numero?: true
    complemento?: true
    cidade?: true
    uf?: true
    area?: true
    bedrooms?: true
    bathrooms?: true
    name?: true
    phone?: true
    email?: true
    generoId?: true
    slug?: true
    created_at?: true
    _all?: true
  }

  export type ImobiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Imobi to aggregate.
     */
    where?: ImobiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imobis to fetch.
     */
    orderBy?: ImobiOrderByWithRelationInput | ImobiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImobiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imobis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imobis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Imobis
    **/
    _count?: true | ImobiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImobiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImobiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImobiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImobiMaxAggregateInputType
  }

  export type GetImobiAggregateType<T extends ImobiAggregateArgs> = {
        [P in keyof T & keyof AggregateImobi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImobi[P]>
      : GetScalarType<T[P], AggregateImobi[P]>
  }




  export type ImobiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImobiWhereInput
    orderBy?: ImobiOrderByWithAggregationInput | ImobiOrderByWithAggregationInput[]
    by: ImobiScalarFieldEnum[] | ImobiScalarFieldEnum
    having?: ImobiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImobiCountAggregateInputType | true
    _avg?: ImobiAvgAggregateInputType
    _sum?: ImobiSumAggregateInputType
    _min?: ImobiMinAggregateInputType
    _max?: ImobiMaxAggregateInputType
  }

  export type ImobiGroupByOutputType = {
    id: number
    userId: number
    thumb: string | null
    images: string | null
    predio: string | null
    description: string | null
    price: string | null
    cep: string | null
    logradouro: string | null
    bairro: string | null
    numero: string | null
    complemento: string | null
    cidade: string | null
    uf: string | null
    area: string | null
    bedrooms: string | null
    bathrooms: string | null
    name: string | null
    phone: string | null
    email: string | null
    generoId: number
    slug: string | null
    created_at: Date
    _count: ImobiCountAggregateOutputType | null
    _avg: ImobiAvgAggregateOutputType | null
    _sum: ImobiSumAggregateOutputType | null
    _min: ImobiMinAggregateOutputType | null
    _max: ImobiMaxAggregateOutputType | null
  }

  type GetImobiGroupByPayload<T extends ImobiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImobiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImobiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImobiGroupByOutputType[P]>
            : GetScalarType<T[P], ImobiGroupByOutputType[P]>
        }
      >
    >


  export type ImobiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    thumb?: boolean
    images?: boolean
    predio?: boolean
    description?: boolean
    price?: boolean
    cep?: boolean
    logradouro?: boolean
    bairro?: boolean
    numero?: boolean
    complemento?: boolean
    cidade?: boolean
    uf?: boolean
    area?: boolean
    bedrooms?: boolean
    bathrooms?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    generoId?: boolean
    slug?: boolean
    created_at?: boolean
    genero?: boolean | GeneroDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imobi"]>


  export type ImobiSelectScalar = {
    id?: boolean
    userId?: boolean
    thumb?: boolean
    images?: boolean
    predio?: boolean
    description?: boolean
    price?: boolean
    cep?: boolean
    logradouro?: boolean
    bairro?: boolean
    numero?: boolean
    complemento?: boolean
    cidade?: boolean
    uf?: boolean
    area?: boolean
    bedrooms?: boolean
    bathrooms?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    generoId?: boolean
    slug?: boolean
    created_at?: boolean
  }

  export type ImobiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    genero?: boolean | GeneroDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ImobiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Imobi"
    objects: {
      genero: Prisma.$GeneroPayload<ExtArgs>
      author: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      thumb: string | null
      images: string | null
      predio: string | null
      description: string | null
      price: string | null
      cep: string | null
      logradouro: string | null
      bairro: string | null
      numero: string | null
      complemento: string | null
      cidade: string | null
      uf: string | null
      area: string | null
      bedrooms: string | null
      bathrooms: string | null
      name: string | null
      phone: string | null
      email: string | null
      generoId: number
      slug: string | null
      created_at: Date
    }, ExtArgs["result"]["imobi"]>
    composites: {}
  }

  type ImobiGetPayload<S extends boolean | null | undefined | ImobiDefaultArgs> = $Result.GetResult<Prisma.$ImobiPayload, S>

  type ImobiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ImobiFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImobiCountAggregateInputType | true
    }

  export interface ImobiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Imobi'], meta: { name: 'Imobi' } }
    /**
     * Find zero or one Imobi that matches the filter.
     * @param {ImobiFindUniqueArgs} args - Arguments to find a Imobi
     * @example
     * // Get one Imobi
     * const imobi = await prisma.imobi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImobiFindUniqueArgs>(args: SelectSubset<T, ImobiFindUniqueArgs<ExtArgs>>): Prisma__ImobiClient<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Imobi that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ImobiFindUniqueOrThrowArgs} args - Arguments to find a Imobi
     * @example
     * // Get one Imobi
     * const imobi = await prisma.imobi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImobiFindUniqueOrThrowArgs>(args: SelectSubset<T, ImobiFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImobiClient<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Imobi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImobiFindFirstArgs} args - Arguments to find a Imobi
     * @example
     * // Get one Imobi
     * const imobi = await prisma.imobi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImobiFindFirstArgs>(args?: SelectSubset<T, ImobiFindFirstArgs<ExtArgs>>): Prisma__ImobiClient<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Imobi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImobiFindFirstOrThrowArgs} args - Arguments to find a Imobi
     * @example
     * // Get one Imobi
     * const imobi = await prisma.imobi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImobiFindFirstOrThrowArgs>(args?: SelectSubset<T, ImobiFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImobiClient<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Imobis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImobiFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Imobis
     * const imobis = await prisma.imobi.findMany()
     * 
     * // Get first 10 Imobis
     * const imobis = await prisma.imobi.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imobiWithIdOnly = await prisma.imobi.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImobiFindManyArgs>(args?: SelectSubset<T, ImobiFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Imobi.
     * @param {ImobiCreateArgs} args - Arguments to create a Imobi.
     * @example
     * // Create one Imobi
     * const Imobi = await prisma.imobi.create({
     *   data: {
     *     // ... data to create a Imobi
     *   }
     * })
     * 
     */
    create<T extends ImobiCreateArgs>(args: SelectSubset<T, ImobiCreateArgs<ExtArgs>>): Prisma__ImobiClient<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Imobis.
     * @param {ImobiCreateManyArgs} args - Arguments to create many Imobis.
     * @example
     * // Create many Imobis
     * const imobi = await prisma.imobi.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImobiCreateManyArgs>(args?: SelectSubset<T, ImobiCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Imobi.
     * @param {ImobiDeleteArgs} args - Arguments to delete one Imobi.
     * @example
     * // Delete one Imobi
     * const Imobi = await prisma.imobi.delete({
     *   where: {
     *     // ... filter to delete one Imobi
     *   }
     * })
     * 
     */
    delete<T extends ImobiDeleteArgs>(args: SelectSubset<T, ImobiDeleteArgs<ExtArgs>>): Prisma__ImobiClient<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Imobi.
     * @param {ImobiUpdateArgs} args - Arguments to update one Imobi.
     * @example
     * // Update one Imobi
     * const imobi = await prisma.imobi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImobiUpdateArgs>(args: SelectSubset<T, ImobiUpdateArgs<ExtArgs>>): Prisma__ImobiClient<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Imobis.
     * @param {ImobiDeleteManyArgs} args - Arguments to filter Imobis to delete.
     * @example
     * // Delete a few Imobis
     * const { count } = await prisma.imobi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImobiDeleteManyArgs>(args?: SelectSubset<T, ImobiDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Imobis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImobiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Imobis
     * const imobi = await prisma.imobi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImobiUpdateManyArgs>(args: SelectSubset<T, ImobiUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Imobi.
     * @param {ImobiUpsertArgs} args - Arguments to update or create a Imobi.
     * @example
     * // Update or create a Imobi
     * const imobi = await prisma.imobi.upsert({
     *   create: {
     *     // ... data to create a Imobi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Imobi we want to update
     *   }
     * })
     */
    upsert<T extends ImobiUpsertArgs>(args: SelectSubset<T, ImobiUpsertArgs<ExtArgs>>): Prisma__ImobiClient<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Imobis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImobiCountArgs} args - Arguments to filter Imobis to count.
     * @example
     * // Count the number of Imobis
     * const count = await prisma.imobi.count({
     *   where: {
     *     // ... the filter for the Imobis we want to count
     *   }
     * })
    **/
    count<T extends ImobiCountArgs>(
      args?: Subset<T, ImobiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImobiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Imobi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImobiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImobiAggregateArgs>(args: Subset<T, ImobiAggregateArgs>): Prisma.PrismaPromise<GetImobiAggregateType<T>>

    /**
     * Group by Imobi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImobiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImobiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImobiGroupByArgs['orderBy'] }
        : { orderBy?: ImobiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImobiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImobiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Imobi model
   */
  readonly fields: ImobiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Imobi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImobiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    genero<T extends GeneroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GeneroDefaultArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Imobi model
   */ 
  interface ImobiFieldRefs {
    readonly id: FieldRef<"Imobi", 'Int'>
    readonly userId: FieldRef<"Imobi", 'Int'>
    readonly thumb: FieldRef<"Imobi", 'String'>
    readonly images: FieldRef<"Imobi", 'String'>
    readonly predio: FieldRef<"Imobi", 'String'>
    readonly description: FieldRef<"Imobi", 'String'>
    readonly price: FieldRef<"Imobi", 'String'>
    readonly cep: FieldRef<"Imobi", 'String'>
    readonly logradouro: FieldRef<"Imobi", 'String'>
    readonly bairro: FieldRef<"Imobi", 'String'>
    readonly numero: FieldRef<"Imobi", 'String'>
    readonly complemento: FieldRef<"Imobi", 'String'>
    readonly cidade: FieldRef<"Imobi", 'String'>
    readonly uf: FieldRef<"Imobi", 'String'>
    readonly area: FieldRef<"Imobi", 'String'>
    readonly bedrooms: FieldRef<"Imobi", 'String'>
    readonly bathrooms: FieldRef<"Imobi", 'String'>
    readonly name: FieldRef<"Imobi", 'String'>
    readonly phone: FieldRef<"Imobi", 'String'>
    readonly email: FieldRef<"Imobi", 'String'>
    readonly generoId: FieldRef<"Imobi", 'Int'>
    readonly slug: FieldRef<"Imobi", 'String'>
    readonly created_at: FieldRef<"Imobi", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Imobi findUnique
   */
  export type ImobiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    /**
     * Filter, which Imobi to fetch.
     */
    where: ImobiWhereUniqueInput
  }

  /**
   * Imobi findUniqueOrThrow
   */
  export type ImobiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    /**
     * Filter, which Imobi to fetch.
     */
    where: ImobiWhereUniqueInput
  }

  /**
   * Imobi findFirst
   */
  export type ImobiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    /**
     * Filter, which Imobi to fetch.
     */
    where?: ImobiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imobis to fetch.
     */
    orderBy?: ImobiOrderByWithRelationInput | ImobiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Imobis.
     */
    cursor?: ImobiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imobis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imobis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Imobis.
     */
    distinct?: ImobiScalarFieldEnum | ImobiScalarFieldEnum[]
  }

  /**
   * Imobi findFirstOrThrow
   */
  export type ImobiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    /**
     * Filter, which Imobi to fetch.
     */
    where?: ImobiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imobis to fetch.
     */
    orderBy?: ImobiOrderByWithRelationInput | ImobiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Imobis.
     */
    cursor?: ImobiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imobis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imobis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Imobis.
     */
    distinct?: ImobiScalarFieldEnum | ImobiScalarFieldEnum[]
  }

  /**
   * Imobi findMany
   */
  export type ImobiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    /**
     * Filter, which Imobis to fetch.
     */
    where?: ImobiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imobis to fetch.
     */
    orderBy?: ImobiOrderByWithRelationInput | ImobiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Imobis.
     */
    cursor?: ImobiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imobis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imobis.
     */
    skip?: number
    distinct?: ImobiScalarFieldEnum | ImobiScalarFieldEnum[]
  }

  /**
   * Imobi create
   */
  export type ImobiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    /**
     * The data needed to create a Imobi.
     */
    data: XOR<ImobiCreateInput, ImobiUncheckedCreateInput>
  }

  /**
   * Imobi createMany
   */
  export type ImobiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Imobis.
     */
    data: ImobiCreateManyInput | ImobiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Imobi update
   */
  export type ImobiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    /**
     * The data needed to update a Imobi.
     */
    data: XOR<ImobiUpdateInput, ImobiUncheckedUpdateInput>
    /**
     * Choose, which Imobi to update.
     */
    where: ImobiWhereUniqueInput
  }

  /**
   * Imobi updateMany
   */
  export type ImobiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Imobis.
     */
    data: XOR<ImobiUpdateManyMutationInput, ImobiUncheckedUpdateManyInput>
    /**
     * Filter which Imobis to update
     */
    where?: ImobiWhereInput
  }

  /**
   * Imobi upsert
   */
  export type ImobiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    /**
     * The filter to search for the Imobi to update in case it exists.
     */
    where: ImobiWhereUniqueInput
    /**
     * In case the Imobi found by the `where` argument doesn't exist, create a new Imobi with this data.
     */
    create: XOR<ImobiCreateInput, ImobiUncheckedCreateInput>
    /**
     * In case the Imobi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImobiUpdateInput, ImobiUncheckedUpdateInput>
  }

  /**
   * Imobi delete
   */
  export type ImobiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    /**
     * Filter which Imobi to delete.
     */
    where: ImobiWhereUniqueInput
  }

  /**
   * Imobi deleteMany
   */
  export type ImobiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Imobis to delete
     */
    where?: ImobiWhereInput
  }

  /**
   * Imobi without action
   */
  export type ImobiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
  }


  /**
   * Model Genero
   */

  export type AggregateGenero = {
    _count: GeneroCountAggregateOutputType | null
    _avg: GeneroAvgAggregateOutputType | null
    _sum: GeneroSumAggregateOutputType | null
    _min: GeneroMinAggregateOutputType | null
    _max: GeneroMaxAggregateOutputType | null
  }

  export type GeneroAvgAggregateOutputType = {
    id_genero: number | null
  }

  export type GeneroSumAggregateOutputType = {
    id_genero: number | null
  }

  export type GeneroMinAggregateOutputType = {
    id_genero: number | null
    genero: string | null
  }

  export type GeneroMaxAggregateOutputType = {
    id_genero: number | null
    genero: string | null
  }

  export type GeneroCountAggregateOutputType = {
    id_genero: number
    genero: number
    _all: number
  }


  export type GeneroAvgAggregateInputType = {
    id_genero?: true
  }

  export type GeneroSumAggregateInputType = {
    id_genero?: true
  }

  export type GeneroMinAggregateInputType = {
    id_genero?: true
    genero?: true
  }

  export type GeneroMaxAggregateInputType = {
    id_genero?: true
    genero?: true
  }

  export type GeneroCountAggregateInputType = {
    id_genero?: true
    genero?: true
    _all?: true
  }

  export type GeneroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genero to aggregate.
     */
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     */
    orderBy?: GeneroOrderByWithRelationInput | GeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Generos
    **/
    _count?: true | GeneroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GeneroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GeneroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneroMaxAggregateInputType
  }

  export type GetGeneroAggregateType<T extends GeneroAggregateArgs> = {
        [P in keyof T & keyof AggregateGenero]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenero[P]>
      : GetScalarType<T[P], AggregateGenero[P]>
  }




  export type GeneroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneroWhereInput
    orderBy?: GeneroOrderByWithAggregationInput | GeneroOrderByWithAggregationInput[]
    by: GeneroScalarFieldEnum[] | GeneroScalarFieldEnum
    having?: GeneroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneroCountAggregateInputType | true
    _avg?: GeneroAvgAggregateInputType
    _sum?: GeneroSumAggregateInputType
    _min?: GeneroMinAggregateInputType
    _max?: GeneroMaxAggregateInputType
  }

  export type GeneroGroupByOutputType = {
    id_genero: number
    genero: string
    _count: GeneroCountAggregateOutputType | null
    _avg: GeneroAvgAggregateOutputType | null
    _sum: GeneroSumAggregateOutputType | null
    _min: GeneroMinAggregateOutputType | null
    _max: GeneroMaxAggregateOutputType | null
  }

  type GetGeneroGroupByPayload<T extends GeneroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneroGroupByOutputType[P]>
            : GetScalarType<T[P], GeneroGroupByOutputType[P]>
        }
      >
    >


  export type GeneroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_genero?: boolean
    genero?: boolean
    users?: boolean | Genero$usersArgs<ExtArgs>
    Imobi?: boolean | Genero$ImobiArgs<ExtArgs>
    _count?: boolean | GeneroCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["genero"]>


  export type GeneroSelectScalar = {
    id_genero?: boolean
    genero?: boolean
  }

  export type GeneroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Genero$usersArgs<ExtArgs>
    Imobi?: boolean | Genero$ImobiArgs<ExtArgs>
    _count?: boolean | GeneroCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GeneroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Genero"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      Imobi: Prisma.$ImobiPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_genero: number
      genero: string
    }, ExtArgs["result"]["genero"]>
    composites: {}
  }

  type GeneroGetPayload<S extends boolean | null | undefined | GeneroDefaultArgs> = $Result.GetResult<Prisma.$GeneroPayload, S>

  type GeneroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GeneroFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GeneroCountAggregateInputType | true
    }

  export interface GeneroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Genero'], meta: { name: 'Genero' } }
    /**
     * Find zero or one Genero that matches the filter.
     * @param {GeneroFindUniqueArgs} args - Arguments to find a Genero
     * @example
     * // Get one Genero
     * const genero = await prisma.genero.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneroFindUniqueArgs>(args: SelectSubset<T, GeneroFindUniqueArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Genero that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GeneroFindUniqueOrThrowArgs} args - Arguments to find a Genero
     * @example
     * // Get one Genero
     * const genero = await prisma.genero.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneroFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Genero that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroFindFirstArgs} args - Arguments to find a Genero
     * @example
     * // Get one Genero
     * const genero = await prisma.genero.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneroFindFirstArgs>(args?: SelectSubset<T, GeneroFindFirstArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Genero that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroFindFirstOrThrowArgs} args - Arguments to find a Genero
     * @example
     * // Get one Genero
     * const genero = await prisma.genero.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneroFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneroFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Generos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Generos
     * const generos = await prisma.genero.findMany()
     * 
     * // Get first 10 Generos
     * const generos = await prisma.genero.findMany({ take: 10 })
     * 
     * // Only select the `id_genero`
     * const generoWithId_generoOnly = await prisma.genero.findMany({ select: { id_genero: true } })
     * 
     */
    findMany<T extends GeneroFindManyArgs>(args?: SelectSubset<T, GeneroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Genero.
     * @param {GeneroCreateArgs} args - Arguments to create a Genero.
     * @example
     * // Create one Genero
     * const Genero = await prisma.genero.create({
     *   data: {
     *     // ... data to create a Genero
     *   }
     * })
     * 
     */
    create<T extends GeneroCreateArgs>(args: SelectSubset<T, GeneroCreateArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Generos.
     * @param {GeneroCreateManyArgs} args - Arguments to create many Generos.
     * @example
     * // Create many Generos
     * const genero = await prisma.genero.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneroCreateManyArgs>(args?: SelectSubset<T, GeneroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Genero.
     * @param {GeneroDeleteArgs} args - Arguments to delete one Genero.
     * @example
     * // Delete one Genero
     * const Genero = await prisma.genero.delete({
     *   where: {
     *     // ... filter to delete one Genero
     *   }
     * })
     * 
     */
    delete<T extends GeneroDeleteArgs>(args: SelectSubset<T, GeneroDeleteArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Genero.
     * @param {GeneroUpdateArgs} args - Arguments to update one Genero.
     * @example
     * // Update one Genero
     * const genero = await prisma.genero.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneroUpdateArgs>(args: SelectSubset<T, GeneroUpdateArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Generos.
     * @param {GeneroDeleteManyArgs} args - Arguments to filter Generos to delete.
     * @example
     * // Delete a few Generos
     * const { count } = await prisma.genero.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneroDeleteManyArgs>(args?: SelectSubset<T, GeneroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Generos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Generos
     * const genero = await prisma.genero.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneroUpdateManyArgs>(args: SelectSubset<T, GeneroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Genero.
     * @param {GeneroUpsertArgs} args - Arguments to update or create a Genero.
     * @example
     * // Update or create a Genero
     * const genero = await prisma.genero.upsert({
     *   create: {
     *     // ... data to create a Genero
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genero we want to update
     *   }
     * })
     */
    upsert<T extends GeneroUpsertArgs>(args: SelectSubset<T, GeneroUpsertArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Generos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroCountArgs} args - Arguments to filter Generos to count.
     * @example
     * // Count the number of Generos
     * const count = await prisma.genero.count({
     *   where: {
     *     // ... the filter for the Generos we want to count
     *   }
     * })
    **/
    count<T extends GeneroCountArgs>(
      args?: Subset<T, GeneroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneroAggregateArgs>(args: Subset<T, GeneroAggregateArgs>): Prisma.PrismaPromise<GetGeneroAggregateType<T>>

    /**
     * Group by Genero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneroGroupByArgs['orderBy'] }
        : { orderBy?: GeneroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Genero model
   */
  readonly fields: GeneroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Genero.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Genero$usersArgs<ExtArgs> = {}>(args?: Subset<T, Genero$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    Imobi<T extends Genero$ImobiArgs<ExtArgs> = {}>(args?: Subset<T, Genero$ImobiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImobiPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Genero model
   */ 
  interface GeneroFieldRefs {
    readonly id_genero: FieldRef<"Genero", 'Int'>
    readonly genero: FieldRef<"Genero", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Genero findUnique
   */
  export type GeneroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter, which Genero to fetch.
     */
    where: GeneroWhereUniqueInput
  }

  /**
   * Genero findUniqueOrThrow
   */
  export type GeneroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter, which Genero to fetch.
     */
    where: GeneroWhereUniqueInput
  }

  /**
   * Genero findFirst
   */
  export type GeneroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter, which Genero to fetch.
     */
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     */
    orderBy?: GeneroOrderByWithRelationInput | GeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Generos.
     */
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Generos.
     */
    distinct?: GeneroScalarFieldEnum | GeneroScalarFieldEnum[]
  }

  /**
   * Genero findFirstOrThrow
   */
  export type GeneroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter, which Genero to fetch.
     */
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     */
    orderBy?: GeneroOrderByWithRelationInput | GeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Generos.
     */
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Generos.
     */
    distinct?: GeneroScalarFieldEnum | GeneroScalarFieldEnum[]
  }

  /**
   * Genero findMany
   */
  export type GeneroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter, which Generos to fetch.
     */
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     */
    orderBy?: GeneroOrderByWithRelationInput | GeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Generos.
     */
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     */
    skip?: number
    distinct?: GeneroScalarFieldEnum | GeneroScalarFieldEnum[]
  }

  /**
   * Genero create
   */
  export type GeneroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * The data needed to create a Genero.
     */
    data: XOR<GeneroCreateInput, GeneroUncheckedCreateInput>
  }

  /**
   * Genero createMany
   */
  export type GeneroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Generos.
     */
    data: GeneroCreateManyInput | GeneroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Genero update
   */
  export type GeneroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * The data needed to update a Genero.
     */
    data: XOR<GeneroUpdateInput, GeneroUncheckedUpdateInput>
    /**
     * Choose, which Genero to update.
     */
    where: GeneroWhereUniqueInput
  }

  /**
   * Genero updateMany
   */
  export type GeneroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Generos.
     */
    data: XOR<GeneroUpdateManyMutationInput, GeneroUncheckedUpdateManyInput>
    /**
     * Filter which Generos to update
     */
    where?: GeneroWhereInput
  }

  /**
   * Genero upsert
   */
  export type GeneroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * The filter to search for the Genero to update in case it exists.
     */
    where: GeneroWhereUniqueInput
    /**
     * In case the Genero found by the `where` argument doesn't exist, create a new Genero with this data.
     */
    create: XOR<GeneroCreateInput, GeneroUncheckedCreateInput>
    /**
     * In case the Genero was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneroUpdateInput, GeneroUncheckedUpdateInput>
  }

  /**
   * Genero delete
   */
  export type GeneroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter which Genero to delete.
     */
    where: GeneroWhereUniqueInput
  }

  /**
   * Genero deleteMany
   */
  export type GeneroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Generos to delete
     */
    where?: GeneroWhereInput
  }

  /**
   * Genero.users
   */
  export type Genero$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Genero.Imobi
   */
  export type Genero$ImobiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imobi
     */
    select?: ImobiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImobiInclude<ExtArgs> | null
    where?: ImobiWhereInput
    orderBy?: ImobiOrderByWithRelationInput | ImobiOrderByWithRelationInput[]
    cursor?: ImobiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImobiScalarFieldEnum | ImobiScalarFieldEnum[]
  }

  /**
   * Genero without action
   */
  export type GeneroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
  }


  /**
   * Model Mensagem
   */

  export type AggregateMensagem = {
    _count: MensagemCountAggregateOutputType | null
    _avg: MensagemAvgAggregateOutputType | null
    _sum: MensagemSumAggregateOutputType | null
    _min: MensagemMinAggregateOutputType | null
    _max: MensagemMaxAggregateOutputType | null
  }

  export type MensagemAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type MensagemSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type MensagemMinAggregateOutputType = {
    id: number | null
    client_name: string | null
    client_email: string | null
    client_message: string | null
    client_telefone: string | null
    userId: number | null
  }

  export type MensagemMaxAggregateOutputType = {
    id: number | null
    client_name: string | null
    client_email: string | null
    client_message: string | null
    client_telefone: string | null
    userId: number | null
  }

  export type MensagemCountAggregateOutputType = {
    id: number
    client_name: number
    client_email: number
    client_message: number
    client_telefone: number
    userId: number
    _all: number
  }


  export type MensagemAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type MensagemSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type MensagemMinAggregateInputType = {
    id?: true
    client_name?: true
    client_email?: true
    client_message?: true
    client_telefone?: true
    userId?: true
  }

  export type MensagemMaxAggregateInputType = {
    id?: true
    client_name?: true
    client_email?: true
    client_message?: true
    client_telefone?: true
    userId?: true
  }

  export type MensagemCountAggregateInputType = {
    id?: true
    client_name?: true
    client_email?: true
    client_message?: true
    client_telefone?: true
    userId?: true
    _all?: true
  }

  export type MensagemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mensagem to aggregate.
     */
    where?: MensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensagems to fetch.
     */
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mensagems
    **/
    _count?: true | MensagemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MensagemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MensagemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MensagemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MensagemMaxAggregateInputType
  }

  export type GetMensagemAggregateType<T extends MensagemAggregateArgs> = {
        [P in keyof T & keyof AggregateMensagem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMensagem[P]>
      : GetScalarType<T[P], AggregateMensagem[P]>
  }




  export type MensagemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MensagemWhereInput
    orderBy?: MensagemOrderByWithAggregationInput | MensagemOrderByWithAggregationInput[]
    by: MensagemScalarFieldEnum[] | MensagemScalarFieldEnum
    having?: MensagemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MensagemCountAggregateInputType | true
    _avg?: MensagemAvgAggregateInputType
    _sum?: MensagemSumAggregateInputType
    _min?: MensagemMinAggregateInputType
    _max?: MensagemMaxAggregateInputType
  }

  export type MensagemGroupByOutputType = {
    id: number
    client_name: string
    client_email: string
    client_message: string
    client_telefone: string
    userId: number
    _count: MensagemCountAggregateOutputType | null
    _avg: MensagemAvgAggregateOutputType | null
    _sum: MensagemSumAggregateOutputType | null
    _min: MensagemMinAggregateOutputType | null
    _max: MensagemMaxAggregateOutputType | null
  }

  type GetMensagemGroupByPayload<T extends MensagemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MensagemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MensagemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MensagemGroupByOutputType[P]>
            : GetScalarType<T[P], MensagemGroupByOutputType[P]>
        }
      >
    >


  export type MensagemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    client_name?: boolean
    client_email?: boolean
    client_message?: boolean
    client_telefone?: boolean
    userId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mensagem"]>


  export type MensagemSelectScalar = {
    id?: boolean
    client_name?: boolean
    client_email?: boolean
    client_message?: boolean
    client_telefone?: boolean
    userId?: boolean
  }

  export type MensagemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MensagemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mensagem"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      client_name: string
      client_email: string
      client_message: string
      client_telefone: string
      userId: number
    }, ExtArgs["result"]["mensagem"]>
    composites: {}
  }

  type MensagemGetPayload<S extends boolean | null | undefined | MensagemDefaultArgs> = $Result.GetResult<Prisma.$MensagemPayload, S>

  type MensagemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MensagemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MensagemCountAggregateInputType | true
    }

  export interface MensagemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mensagem'], meta: { name: 'Mensagem' } }
    /**
     * Find zero or one Mensagem that matches the filter.
     * @param {MensagemFindUniqueArgs} args - Arguments to find a Mensagem
     * @example
     * // Get one Mensagem
     * const mensagem = await prisma.mensagem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MensagemFindUniqueArgs>(args: SelectSubset<T, MensagemFindUniqueArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Mensagem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MensagemFindUniqueOrThrowArgs} args - Arguments to find a Mensagem
     * @example
     * // Get one Mensagem
     * const mensagem = await prisma.mensagem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MensagemFindUniqueOrThrowArgs>(args: SelectSubset<T, MensagemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Mensagem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemFindFirstArgs} args - Arguments to find a Mensagem
     * @example
     * // Get one Mensagem
     * const mensagem = await prisma.mensagem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MensagemFindFirstArgs>(args?: SelectSubset<T, MensagemFindFirstArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Mensagem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemFindFirstOrThrowArgs} args - Arguments to find a Mensagem
     * @example
     * // Get one Mensagem
     * const mensagem = await prisma.mensagem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MensagemFindFirstOrThrowArgs>(args?: SelectSubset<T, MensagemFindFirstOrThrowArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Mensagems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mensagems
     * const mensagems = await prisma.mensagem.findMany()
     * 
     * // Get first 10 Mensagems
     * const mensagems = await prisma.mensagem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mensagemWithIdOnly = await prisma.mensagem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MensagemFindManyArgs>(args?: SelectSubset<T, MensagemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Mensagem.
     * @param {MensagemCreateArgs} args - Arguments to create a Mensagem.
     * @example
     * // Create one Mensagem
     * const Mensagem = await prisma.mensagem.create({
     *   data: {
     *     // ... data to create a Mensagem
     *   }
     * })
     * 
     */
    create<T extends MensagemCreateArgs>(args: SelectSubset<T, MensagemCreateArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Mensagems.
     * @param {MensagemCreateManyArgs} args - Arguments to create many Mensagems.
     * @example
     * // Create many Mensagems
     * const mensagem = await prisma.mensagem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MensagemCreateManyArgs>(args?: SelectSubset<T, MensagemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mensagem.
     * @param {MensagemDeleteArgs} args - Arguments to delete one Mensagem.
     * @example
     * // Delete one Mensagem
     * const Mensagem = await prisma.mensagem.delete({
     *   where: {
     *     // ... filter to delete one Mensagem
     *   }
     * })
     * 
     */
    delete<T extends MensagemDeleteArgs>(args: SelectSubset<T, MensagemDeleteArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Mensagem.
     * @param {MensagemUpdateArgs} args - Arguments to update one Mensagem.
     * @example
     * // Update one Mensagem
     * const mensagem = await prisma.mensagem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MensagemUpdateArgs>(args: SelectSubset<T, MensagemUpdateArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Mensagems.
     * @param {MensagemDeleteManyArgs} args - Arguments to filter Mensagems to delete.
     * @example
     * // Delete a few Mensagems
     * const { count } = await prisma.mensagem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MensagemDeleteManyArgs>(args?: SelectSubset<T, MensagemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mensagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mensagems
     * const mensagem = await prisma.mensagem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MensagemUpdateManyArgs>(args: SelectSubset<T, MensagemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mensagem.
     * @param {MensagemUpsertArgs} args - Arguments to update or create a Mensagem.
     * @example
     * // Update or create a Mensagem
     * const mensagem = await prisma.mensagem.upsert({
     *   create: {
     *     // ... data to create a Mensagem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mensagem we want to update
     *   }
     * })
     */
    upsert<T extends MensagemUpsertArgs>(args: SelectSubset<T, MensagemUpsertArgs<ExtArgs>>): Prisma__MensagemClient<$Result.GetResult<Prisma.$MensagemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Mensagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemCountArgs} args - Arguments to filter Mensagems to count.
     * @example
     * // Count the number of Mensagems
     * const count = await prisma.mensagem.count({
     *   where: {
     *     // ... the filter for the Mensagems we want to count
     *   }
     * })
    **/
    count<T extends MensagemCountArgs>(
      args?: Subset<T, MensagemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MensagemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mensagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MensagemAggregateArgs>(args: Subset<T, MensagemAggregateArgs>): Prisma.PrismaPromise<GetMensagemAggregateType<T>>

    /**
     * Group by Mensagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MensagemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MensagemGroupByArgs['orderBy'] }
        : { orderBy?: MensagemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MensagemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMensagemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mensagem model
   */
  readonly fields: MensagemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mensagem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MensagemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mensagem model
   */ 
  interface MensagemFieldRefs {
    readonly id: FieldRef<"Mensagem", 'Int'>
    readonly client_name: FieldRef<"Mensagem", 'String'>
    readonly client_email: FieldRef<"Mensagem", 'String'>
    readonly client_message: FieldRef<"Mensagem", 'String'>
    readonly client_telefone: FieldRef<"Mensagem", 'String'>
    readonly userId: FieldRef<"Mensagem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Mensagem findUnique
   */
  export type MensagemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter, which Mensagem to fetch.
     */
    where: MensagemWhereUniqueInput
  }

  /**
   * Mensagem findUniqueOrThrow
   */
  export type MensagemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter, which Mensagem to fetch.
     */
    where: MensagemWhereUniqueInput
  }

  /**
   * Mensagem findFirst
   */
  export type MensagemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter, which Mensagem to fetch.
     */
    where?: MensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensagems to fetch.
     */
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mensagems.
     */
    cursor?: MensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mensagems.
     */
    distinct?: MensagemScalarFieldEnum | MensagemScalarFieldEnum[]
  }

  /**
   * Mensagem findFirstOrThrow
   */
  export type MensagemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter, which Mensagem to fetch.
     */
    where?: MensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensagems to fetch.
     */
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mensagems.
     */
    cursor?: MensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mensagems.
     */
    distinct?: MensagemScalarFieldEnum | MensagemScalarFieldEnum[]
  }

  /**
   * Mensagem findMany
   */
  export type MensagemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter, which Mensagems to fetch.
     */
    where?: MensagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mensagems to fetch.
     */
    orderBy?: MensagemOrderByWithRelationInput | MensagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mensagems.
     */
    cursor?: MensagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mensagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mensagems.
     */
    skip?: number
    distinct?: MensagemScalarFieldEnum | MensagemScalarFieldEnum[]
  }

  /**
   * Mensagem create
   */
  export type MensagemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * The data needed to create a Mensagem.
     */
    data: XOR<MensagemCreateInput, MensagemUncheckedCreateInput>
  }

  /**
   * Mensagem createMany
   */
  export type MensagemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mensagems.
     */
    data: MensagemCreateManyInput | MensagemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mensagem update
   */
  export type MensagemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * The data needed to update a Mensagem.
     */
    data: XOR<MensagemUpdateInput, MensagemUncheckedUpdateInput>
    /**
     * Choose, which Mensagem to update.
     */
    where: MensagemWhereUniqueInput
  }

  /**
   * Mensagem updateMany
   */
  export type MensagemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mensagems.
     */
    data: XOR<MensagemUpdateManyMutationInput, MensagemUncheckedUpdateManyInput>
    /**
     * Filter which Mensagems to update
     */
    where?: MensagemWhereInput
  }

  /**
   * Mensagem upsert
   */
  export type MensagemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * The filter to search for the Mensagem to update in case it exists.
     */
    where: MensagemWhereUniqueInput
    /**
     * In case the Mensagem found by the `where` argument doesn't exist, create a new Mensagem with this data.
     */
    create: XOR<MensagemCreateInput, MensagemUncheckedCreateInput>
    /**
     * In case the Mensagem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MensagemUpdateInput, MensagemUncheckedUpdateInput>
  }

  /**
   * Mensagem delete
   */
  export type MensagemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
    /**
     * Filter which Mensagem to delete.
     */
    where: MensagemWhereUniqueInput
  }

  /**
   * Mensagem deleteMany
   */
  export type MensagemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mensagems to delete
     */
    where?: MensagemWhereInput
  }

  /**
   * Mensagem without action
   */
  export type MensagemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mensagem
     */
    select?: MensagemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cpf: 'cpf',
    birthdate: 'birthdate',
    generoId: 'generoId',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ImobiScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    thumb: 'thumb',
    images: 'images',
    predio: 'predio',
    description: 'description',
    price: 'price',
    cep: 'cep',
    logradouro: 'logradouro',
    bairro: 'bairro',
    numero: 'numero',
    complemento: 'complemento',
    cidade: 'cidade',
    uf: 'uf',
    area: 'area',
    bedrooms: 'bedrooms',
    bathrooms: 'bathrooms',
    name: 'name',
    phone: 'phone',
    email: 'email',
    generoId: 'generoId',
    slug: 'slug',
    created_at: 'created_at'
  };

  export type ImobiScalarFieldEnum = (typeof ImobiScalarFieldEnum)[keyof typeof ImobiScalarFieldEnum]


  export const GeneroScalarFieldEnum: {
    id_genero: 'id_genero',
    genero: 'genero'
  };

  export type GeneroScalarFieldEnum = (typeof GeneroScalarFieldEnum)[keyof typeof GeneroScalarFieldEnum]


  export const MensagemScalarFieldEnum: {
    id: 'id',
    client_name: 'client_name',
    client_email: 'client_email',
    client_message: 'client_message',
    client_telefone: 'client_telefone',
    userId: 'userId'
  };

  export type MensagemScalarFieldEnum = (typeof MensagemScalarFieldEnum)[keyof typeof MensagemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    cpf?: StringFilter<"User"> | string
    birthdate?: DateTimeFilter<"User"> | Date | string
    generoId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    genero?: XOR<GeneroRelationFilter, GeneroWhereInput>
    imobi?: ImobiListRelationFilter
    mensagem?: MensagemListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    birthdate?: SortOrder
    generoId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    genero?: GeneroOrderByWithRelationInput
    imobi?: ImobiOrderByRelationAggregateInput
    mensagem?: MensagemOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    birthdate?: DateTimeFilter<"User"> | Date | string
    generoId?: IntFilter<"User"> | number
    password?: StringFilter<"User"> | string
    genero?: XOR<GeneroRelationFilter, GeneroWhereInput>
    imobi?: ImobiListRelationFilter
    mensagem?: MensagemListRelationFilter
  }, "id" | "cpf" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    birthdate?: SortOrder
    generoId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    cpf?: StringWithAggregatesFilter<"User"> | string
    birthdate?: DateTimeWithAggregatesFilter<"User"> | Date | string
    generoId?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type ImobiWhereInput = {
    AND?: ImobiWhereInput | ImobiWhereInput[]
    OR?: ImobiWhereInput[]
    NOT?: ImobiWhereInput | ImobiWhereInput[]
    id?: IntFilter<"Imobi"> | number
    userId?: IntFilter<"Imobi"> | number
    thumb?: StringNullableFilter<"Imobi"> | string | null
    images?: StringNullableFilter<"Imobi"> | string | null
    predio?: StringNullableFilter<"Imobi"> | string | null
    description?: StringNullableFilter<"Imobi"> | string | null
    price?: StringNullableFilter<"Imobi"> | string | null
    cep?: StringNullableFilter<"Imobi"> | string | null
    logradouro?: StringNullableFilter<"Imobi"> | string | null
    bairro?: StringNullableFilter<"Imobi"> | string | null
    numero?: StringNullableFilter<"Imobi"> | string | null
    complemento?: StringNullableFilter<"Imobi"> | string | null
    cidade?: StringNullableFilter<"Imobi"> | string | null
    uf?: StringNullableFilter<"Imobi"> | string | null
    area?: StringNullableFilter<"Imobi"> | string | null
    bedrooms?: StringNullableFilter<"Imobi"> | string | null
    bathrooms?: StringNullableFilter<"Imobi"> | string | null
    name?: StringNullableFilter<"Imobi"> | string | null
    phone?: StringNullableFilter<"Imobi"> | string | null
    email?: StringNullableFilter<"Imobi"> | string | null
    generoId?: IntFilter<"Imobi"> | number
    slug?: StringNullableFilter<"Imobi"> | string | null
    created_at?: DateTimeFilter<"Imobi"> | Date | string
    genero?: XOR<GeneroRelationFilter, GeneroWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ImobiOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    thumb?: SortOrderInput | SortOrder
    images?: SortOrderInput | SortOrder
    predio?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    cep?: SortOrderInput | SortOrder
    logradouro?: SortOrderInput | SortOrder
    bairro?: SortOrderInput | SortOrder
    numero?: SortOrderInput | SortOrder
    complemento?: SortOrderInput | SortOrder
    cidade?: SortOrderInput | SortOrder
    uf?: SortOrderInput | SortOrder
    area?: SortOrderInput | SortOrder
    bedrooms?: SortOrderInput | SortOrder
    bathrooms?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    generoId?: SortOrder
    slug?: SortOrderInput | SortOrder
    created_at?: SortOrder
    genero?: GeneroOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
  }

  export type ImobiWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: ImobiWhereInput | ImobiWhereInput[]
    OR?: ImobiWhereInput[]
    NOT?: ImobiWhereInput | ImobiWhereInput[]
    userId?: IntFilter<"Imobi"> | number
    thumb?: StringNullableFilter<"Imobi"> | string | null
    images?: StringNullableFilter<"Imobi"> | string | null
    predio?: StringNullableFilter<"Imobi"> | string | null
    description?: StringNullableFilter<"Imobi"> | string | null
    price?: StringNullableFilter<"Imobi"> | string | null
    cep?: StringNullableFilter<"Imobi"> | string | null
    logradouro?: StringNullableFilter<"Imobi"> | string | null
    bairro?: StringNullableFilter<"Imobi"> | string | null
    numero?: StringNullableFilter<"Imobi"> | string | null
    complemento?: StringNullableFilter<"Imobi"> | string | null
    cidade?: StringNullableFilter<"Imobi"> | string | null
    uf?: StringNullableFilter<"Imobi"> | string | null
    area?: StringNullableFilter<"Imobi"> | string | null
    bedrooms?: StringNullableFilter<"Imobi"> | string | null
    bathrooms?: StringNullableFilter<"Imobi"> | string | null
    name?: StringNullableFilter<"Imobi"> | string | null
    phone?: StringNullableFilter<"Imobi"> | string | null
    email?: StringNullableFilter<"Imobi"> | string | null
    generoId?: IntFilter<"Imobi"> | number
    created_at?: DateTimeFilter<"Imobi"> | Date | string
    genero?: XOR<GeneroRelationFilter, GeneroWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "slug">

  export type ImobiOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    thumb?: SortOrderInput | SortOrder
    images?: SortOrderInput | SortOrder
    predio?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    cep?: SortOrderInput | SortOrder
    logradouro?: SortOrderInput | SortOrder
    bairro?: SortOrderInput | SortOrder
    numero?: SortOrderInput | SortOrder
    complemento?: SortOrderInput | SortOrder
    cidade?: SortOrderInput | SortOrder
    uf?: SortOrderInput | SortOrder
    area?: SortOrderInput | SortOrder
    bedrooms?: SortOrderInput | SortOrder
    bathrooms?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    generoId?: SortOrder
    slug?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: ImobiCountOrderByAggregateInput
    _avg?: ImobiAvgOrderByAggregateInput
    _max?: ImobiMaxOrderByAggregateInput
    _min?: ImobiMinOrderByAggregateInput
    _sum?: ImobiSumOrderByAggregateInput
  }

  export type ImobiScalarWhereWithAggregatesInput = {
    AND?: ImobiScalarWhereWithAggregatesInput | ImobiScalarWhereWithAggregatesInput[]
    OR?: ImobiScalarWhereWithAggregatesInput[]
    NOT?: ImobiScalarWhereWithAggregatesInput | ImobiScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Imobi"> | number
    userId?: IntWithAggregatesFilter<"Imobi"> | number
    thumb?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    images?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    predio?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    description?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    price?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    cep?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    logradouro?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    bairro?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    numero?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    complemento?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    cidade?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    uf?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    area?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    bedrooms?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    bathrooms?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    name?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    email?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    generoId?: IntWithAggregatesFilter<"Imobi"> | number
    slug?: StringNullableWithAggregatesFilter<"Imobi"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Imobi"> | Date | string
  }

  export type GeneroWhereInput = {
    AND?: GeneroWhereInput | GeneroWhereInput[]
    OR?: GeneroWhereInput[]
    NOT?: GeneroWhereInput | GeneroWhereInput[]
    id_genero?: IntFilter<"Genero"> | number
    genero?: StringFilter<"Genero"> | string
    users?: UserListRelationFilter
    Imobi?: ImobiListRelationFilter
  }

  export type GeneroOrderByWithRelationInput = {
    id_genero?: SortOrder
    genero?: SortOrder
    users?: UserOrderByRelationAggregateInput
    Imobi?: ImobiOrderByRelationAggregateInput
  }

  export type GeneroWhereUniqueInput = Prisma.AtLeast<{
    id_genero?: number
    AND?: GeneroWhereInput | GeneroWhereInput[]
    OR?: GeneroWhereInput[]
    NOT?: GeneroWhereInput | GeneroWhereInput[]
    genero?: StringFilter<"Genero"> | string
    users?: UserListRelationFilter
    Imobi?: ImobiListRelationFilter
  }, "id_genero">

  export type GeneroOrderByWithAggregationInput = {
    id_genero?: SortOrder
    genero?: SortOrder
    _count?: GeneroCountOrderByAggregateInput
    _avg?: GeneroAvgOrderByAggregateInput
    _max?: GeneroMaxOrderByAggregateInput
    _min?: GeneroMinOrderByAggregateInput
    _sum?: GeneroSumOrderByAggregateInput
  }

  export type GeneroScalarWhereWithAggregatesInput = {
    AND?: GeneroScalarWhereWithAggregatesInput | GeneroScalarWhereWithAggregatesInput[]
    OR?: GeneroScalarWhereWithAggregatesInput[]
    NOT?: GeneroScalarWhereWithAggregatesInput | GeneroScalarWhereWithAggregatesInput[]
    id_genero?: IntWithAggregatesFilter<"Genero"> | number
    genero?: StringWithAggregatesFilter<"Genero"> | string
  }

  export type MensagemWhereInput = {
    AND?: MensagemWhereInput | MensagemWhereInput[]
    OR?: MensagemWhereInput[]
    NOT?: MensagemWhereInput | MensagemWhereInput[]
    id?: IntFilter<"Mensagem"> | number
    client_name?: StringFilter<"Mensagem"> | string
    client_email?: StringFilter<"Mensagem"> | string
    client_message?: StringFilter<"Mensagem"> | string
    client_telefone?: StringFilter<"Mensagem"> | string
    userId?: IntFilter<"Mensagem"> | number
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MensagemOrderByWithRelationInput = {
    id?: SortOrder
    client_name?: SortOrder
    client_email?: SortOrder
    client_message?: SortOrder
    client_telefone?: SortOrder
    userId?: SortOrder
    author?: UserOrderByWithRelationInput
  }

  export type MensagemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MensagemWhereInput | MensagemWhereInput[]
    OR?: MensagemWhereInput[]
    NOT?: MensagemWhereInput | MensagemWhereInput[]
    client_name?: StringFilter<"Mensagem"> | string
    client_email?: StringFilter<"Mensagem"> | string
    client_message?: StringFilter<"Mensagem"> | string
    client_telefone?: StringFilter<"Mensagem"> | string
    userId?: IntFilter<"Mensagem"> | number
    author?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type MensagemOrderByWithAggregationInput = {
    id?: SortOrder
    client_name?: SortOrder
    client_email?: SortOrder
    client_message?: SortOrder
    client_telefone?: SortOrder
    userId?: SortOrder
    _count?: MensagemCountOrderByAggregateInput
    _avg?: MensagemAvgOrderByAggregateInput
    _max?: MensagemMaxOrderByAggregateInput
    _min?: MensagemMinOrderByAggregateInput
    _sum?: MensagemSumOrderByAggregateInput
  }

  export type MensagemScalarWhereWithAggregatesInput = {
    AND?: MensagemScalarWhereWithAggregatesInput | MensagemScalarWhereWithAggregatesInput[]
    OR?: MensagemScalarWhereWithAggregatesInput[]
    NOT?: MensagemScalarWhereWithAggregatesInput | MensagemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Mensagem"> | number
    client_name?: StringWithAggregatesFilter<"Mensagem"> | string
    client_email?: StringWithAggregatesFilter<"Mensagem"> | string
    client_message?: StringWithAggregatesFilter<"Mensagem"> | string
    client_telefone?: StringWithAggregatesFilter<"Mensagem"> | string
    userId?: IntWithAggregatesFilter<"Mensagem"> | number
  }

  export type UserCreateInput = {
    name: string
    cpf: string
    birthdate: Date | string
    email: string
    password: string
    genero: GeneroCreateNestedOneWithoutUsersInput
    imobi?: ImobiCreateNestedManyWithoutAuthorInput
    mensagem?: MensagemCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    cpf: string
    birthdate: Date | string
    generoId: number
    email: string
    password: string
    imobi?: ImobiUncheckedCreateNestedManyWithoutAuthorInput
    mensagem?: MensagemUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    genero?: GeneroUpdateOneRequiredWithoutUsersNestedInput
    imobi?: ImobiUpdateManyWithoutAuthorNestedInput
    mensagem?: MensagemUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    generoId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imobi?: ImobiUncheckedUpdateManyWithoutAuthorNestedInput
    mensagem?: MensagemUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    cpf: string
    birthdate: Date | string
    generoId: number
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    generoId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ImobiCreateInput = {
    thumb?: string | null
    images?: string | null
    predio?: string | null
    description?: string | null
    price?: string | null
    cep?: string | null
    logradouro?: string | null
    bairro?: string | null
    numero?: string | null
    complemento?: string | null
    cidade?: string | null
    uf?: string | null
    area?: string | null
    bedrooms?: string | null
    bathrooms?: string | null
    name?: string | null
    phone?: string | null
    email?: string | null
    slug?: string | null
    created_at?: Date | string
    genero: GeneroCreateNestedOneWithoutImobiInput
    author: UserCreateNestedOneWithoutImobiInput
  }

  export type ImobiUncheckedCreateInput = {
    id?: number
    userId: number
    thumb?: string | null
    images?: string | null
    predio?: string | null
    description?: string | null
    price?: string | null
    cep?: string | null
    logradouro?: string | null
    bairro?: string | null
    numero?: string | null
    complemento?: string | null
    cidade?: string | null
    uf?: string | null
    area?: string | null
    bedrooms?: string | null
    bathrooms?: string | null
    name?: string | null
    phone?: string | null
    email?: string | null
    generoId: number
    slug?: string | null
    created_at?: Date | string
  }

  export type ImobiUpdateInput = {
    thumb?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    predio?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    logradouro?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    uf?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableStringFieldUpdateOperationsInput | string | null
    bathrooms?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: GeneroUpdateOneRequiredWithoutImobiNestedInput
    author?: UserUpdateOneRequiredWithoutImobiNestedInput
  }

  export type ImobiUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    thumb?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    predio?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    logradouro?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    uf?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableStringFieldUpdateOperationsInput | string | null
    bathrooms?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    generoId?: IntFieldUpdateOperationsInput | number
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImobiCreateManyInput = {
    id?: number
    userId: number
    thumb?: string | null
    images?: string | null
    predio?: string | null
    description?: string | null
    price?: string | null
    cep?: string | null
    logradouro?: string | null
    bairro?: string | null
    numero?: string | null
    complemento?: string | null
    cidade?: string | null
    uf?: string | null
    area?: string | null
    bedrooms?: string | null
    bathrooms?: string | null
    name?: string | null
    phone?: string | null
    email?: string | null
    generoId: number
    slug?: string | null
    created_at?: Date | string
  }

  export type ImobiUpdateManyMutationInput = {
    thumb?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    predio?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    logradouro?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    uf?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableStringFieldUpdateOperationsInput | string | null
    bathrooms?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImobiUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    thumb?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    predio?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    logradouro?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    uf?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableStringFieldUpdateOperationsInput | string | null
    bathrooms?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    generoId?: IntFieldUpdateOperationsInput | number
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneroCreateInput = {
    genero: string
    users?: UserCreateNestedManyWithoutGeneroInput
    Imobi?: ImobiCreateNestedManyWithoutGeneroInput
  }

  export type GeneroUncheckedCreateInput = {
    id_genero?: number
    genero: string
    users?: UserUncheckedCreateNestedManyWithoutGeneroInput
    Imobi?: ImobiUncheckedCreateNestedManyWithoutGeneroInput
  }

  export type GeneroUpdateInput = {
    genero?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutGeneroNestedInput
    Imobi?: ImobiUpdateManyWithoutGeneroNestedInput
  }

  export type GeneroUncheckedUpdateInput = {
    id_genero?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutGeneroNestedInput
    Imobi?: ImobiUncheckedUpdateManyWithoutGeneroNestedInput
  }

  export type GeneroCreateManyInput = {
    id_genero?: number
    genero: string
  }

  export type GeneroUpdateManyMutationInput = {
    genero?: StringFieldUpdateOperationsInput | string
  }

  export type GeneroUncheckedUpdateManyInput = {
    id_genero?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
  }

  export type MensagemCreateInput = {
    client_name: string
    client_email: string
    client_message: string
    client_telefone: string
    author: UserCreateNestedOneWithoutMensagemInput
  }

  export type MensagemUncheckedCreateInput = {
    id?: number
    client_name: string
    client_email: string
    client_message: string
    client_telefone: string
    userId: number
  }

  export type MensagemUpdateInput = {
    client_name?: StringFieldUpdateOperationsInput | string
    client_email?: StringFieldUpdateOperationsInput | string
    client_message?: StringFieldUpdateOperationsInput | string
    client_telefone?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutMensagemNestedInput
  }

  export type MensagemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    client_name?: StringFieldUpdateOperationsInput | string
    client_email?: StringFieldUpdateOperationsInput | string
    client_message?: StringFieldUpdateOperationsInput | string
    client_telefone?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MensagemCreateManyInput = {
    id?: number
    client_name: string
    client_email: string
    client_message: string
    client_telefone: string
    userId: number
  }

  export type MensagemUpdateManyMutationInput = {
    client_name?: StringFieldUpdateOperationsInput | string
    client_email?: StringFieldUpdateOperationsInput | string
    client_message?: StringFieldUpdateOperationsInput | string
    client_telefone?: StringFieldUpdateOperationsInput | string
  }

  export type MensagemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    client_name?: StringFieldUpdateOperationsInput | string
    client_email?: StringFieldUpdateOperationsInput | string
    client_message?: StringFieldUpdateOperationsInput | string
    client_telefone?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type GeneroRelationFilter = {
    is?: GeneroWhereInput
    isNot?: GeneroWhereInput
  }

  export type ImobiListRelationFilter = {
    every?: ImobiWhereInput
    some?: ImobiWhereInput
    none?: ImobiWhereInput
  }

  export type MensagemListRelationFilter = {
    every?: MensagemWhereInput
    some?: MensagemWhereInput
    none?: MensagemWhereInput
  }

  export type ImobiOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MensagemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    birthdate?: SortOrder
    generoId?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    generoId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    birthdate?: SortOrder
    generoId?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    birthdate?: SortOrder
    generoId?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    generoId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ImobiCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    thumb?: SortOrder
    images?: SortOrder
    predio?: SortOrder
    description?: SortOrder
    price?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    cidade?: SortOrder
    uf?: SortOrder
    area?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    generoId?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
  }

  export type ImobiAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    generoId?: SortOrder
  }

  export type ImobiMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    thumb?: SortOrder
    images?: SortOrder
    predio?: SortOrder
    description?: SortOrder
    price?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    cidade?: SortOrder
    uf?: SortOrder
    area?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    generoId?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
  }

  export type ImobiMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    thumb?: SortOrder
    images?: SortOrder
    predio?: SortOrder
    description?: SortOrder
    price?: SortOrder
    cep?: SortOrder
    logradouro?: SortOrder
    bairro?: SortOrder
    numero?: SortOrder
    complemento?: SortOrder
    cidade?: SortOrder
    uf?: SortOrder
    area?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    generoId?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
  }

  export type ImobiSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    generoId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GeneroCountOrderByAggregateInput = {
    id_genero?: SortOrder
    genero?: SortOrder
  }

  export type GeneroAvgOrderByAggregateInput = {
    id_genero?: SortOrder
  }

  export type GeneroMaxOrderByAggregateInput = {
    id_genero?: SortOrder
    genero?: SortOrder
  }

  export type GeneroMinOrderByAggregateInput = {
    id_genero?: SortOrder
    genero?: SortOrder
  }

  export type GeneroSumOrderByAggregateInput = {
    id_genero?: SortOrder
  }

  export type MensagemCountOrderByAggregateInput = {
    id?: SortOrder
    client_name?: SortOrder
    client_email?: SortOrder
    client_message?: SortOrder
    client_telefone?: SortOrder
    userId?: SortOrder
  }

  export type MensagemAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type MensagemMaxOrderByAggregateInput = {
    id?: SortOrder
    client_name?: SortOrder
    client_email?: SortOrder
    client_message?: SortOrder
    client_telefone?: SortOrder
    userId?: SortOrder
  }

  export type MensagemMinOrderByAggregateInput = {
    id?: SortOrder
    client_name?: SortOrder
    client_email?: SortOrder
    client_message?: SortOrder
    client_telefone?: SortOrder
    userId?: SortOrder
  }

  export type MensagemSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type GeneroCreateNestedOneWithoutUsersInput = {
    create?: XOR<GeneroCreateWithoutUsersInput, GeneroUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GeneroCreateOrConnectWithoutUsersInput
    connect?: GeneroWhereUniqueInput
  }

  export type ImobiCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ImobiCreateWithoutAuthorInput, ImobiUncheckedCreateWithoutAuthorInput> | ImobiCreateWithoutAuthorInput[] | ImobiUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ImobiCreateOrConnectWithoutAuthorInput | ImobiCreateOrConnectWithoutAuthorInput[]
    createMany?: ImobiCreateManyAuthorInputEnvelope
    connect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
  }

  export type MensagemCreateNestedManyWithoutAuthorInput = {
    create?: XOR<MensagemCreateWithoutAuthorInput, MensagemUncheckedCreateWithoutAuthorInput> | MensagemCreateWithoutAuthorInput[] | MensagemUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutAuthorInput | MensagemCreateOrConnectWithoutAuthorInput[]
    createMany?: MensagemCreateManyAuthorInputEnvelope
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
  }

  export type ImobiUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ImobiCreateWithoutAuthorInput, ImobiUncheckedCreateWithoutAuthorInput> | ImobiCreateWithoutAuthorInput[] | ImobiUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ImobiCreateOrConnectWithoutAuthorInput | ImobiCreateOrConnectWithoutAuthorInput[]
    createMany?: ImobiCreateManyAuthorInputEnvelope
    connect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
  }

  export type MensagemUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<MensagemCreateWithoutAuthorInput, MensagemUncheckedCreateWithoutAuthorInput> | MensagemCreateWithoutAuthorInput[] | MensagemUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutAuthorInput | MensagemCreateOrConnectWithoutAuthorInput[]
    createMany?: MensagemCreateManyAuthorInputEnvelope
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GeneroUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<GeneroCreateWithoutUsersInput, GeneroUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GeneroCreateOrConnectWithoutUsersInput
    upsert?: GeneroUpsertWithoutUsersInput
    connect?: GeneroWhereUniqueInput
    update?: XOR<XOR<GeneroUpdateToOneWithWhereWithoutUsersInput, GeneroUpdateWithoutUsersInput>, GeneroUncheckedUpdateWithoutUsersInput>
  }

  export type ImobiUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ImobiCreateWithoutAuthorInput, ImobiUncheckedCreateWithoutAuthorInput> | ImobiCreateWithoutAuthorInput[] | ImobiUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ImobiCreateOrConnectWithoutAuthorInput | ImobiCreateOrConnectWithoutAuthorInput[]
    upsert?: ImobiUpsertWithWhereUniqueWithoutAuthorInput | ImobiUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ImobiCreateManyAuthorInputEnvelope
    set?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    disconnect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    delete?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    connect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    update?: ImobiUpdateWithWhereUniqueWithoutAuthorInput | ImobiUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ImobiUpdateManyWithWhereWithoutAuthorInput | ImobiUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ImobiScalarWhereInput | ImobiScalarWhereInput[]
  }

  export type MensagemUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<MensagemCreateWithoutAuthorInput, MensagemUncheckedCreateWithoutAuthorInput> | MensagemCreateWithoutAuthorInput[] | MensagemUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutAuthorInput | MensagemCreateOrConnectWithoutAuthorInput[]
    upsert?: MensagemUpsertWithWhereUniqueWithoutAuthorInput | MensagemUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: MensagemCreateManyAuthorInputEnvelope
    set?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    disconnect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    delete?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    update?: MensagemUpdateWithWhereUniqueWithoutAuthorInput | MensagemUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: MensagemUpdateManyWithWhereWithoutAuthorInput | MensagemUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: MensagemScalarWhereInput | MensagemScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ImobiUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ImobiCreateWithoutAuthorInput, ImobiUncheckedCreateWithoutAuthorInput> | ImobiCreateWithoutAuthorInput[] | ImobiUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ImobiCreateOrConnectWithoutAuthorInput | ImobiCreateOrConnectWithoutAuthorInput[]
    upsert?: ImobiUpsertWithWhereUniqueWithoutAuthorInput | ImobiUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: ImobiCreateManyAuthorInputEnvelope
    set?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    disconnect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    delete?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    connect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    update?: ImobiUpdateWithWhereUniqueWithoutAuthorInput | ImobiUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ImobiUpdateManyWithWhereWithoutAuthorInput | ImobiUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ImobiScalarWhereInput | ImobiScalarWhereInput[]
  }

  export type MensagemUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<MensagemCreateWithoutAuthorInput, MensagemUncheckedCreateWithoutAuthorInput> | MensagemCreateWithoutAuthorInput[] | MensagemUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: MensagemCreateOrConnectWithoutAuthorInput | MensagemCreateOrConnectWithoutAuthorInput[]
    upsert?: MensagemUpsertWithWhereUniqueWithoutAuthorInput | MensagemUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: MensagemCreateManyAuthorInputEnvelope
    set?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    disconnect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    delete?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    connect?: MensagemWhereUniqueInput | MensagemWhereUniqueInput[]
    update?: MensagemUpdateWithWhereUniqueWithoutAuthorInput | MensagemUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: MensagemUpdateManyWithWhereWithoutAuthorInput | MensagemUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: MensagemScalarWhereInput | MensagemScalarWhereInput[]
  }

  export type GeneroCreateNestedOneWithoutImobiInput = {
    create?: XOR<GeneroCreateWithoutImobiInput, GeneroUncheckedCreateWithoutImobiInput>
    connectOrCreate?: GeneroCreateOrConnectWithoutImobiInput
    connect?: GeneroWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutImobiInput = {
    create?: XOR<UserCreateWithoutImobiInput, UserUncheckedCreateWithoutImobiInput>
    connectOrCreate?: UserCreateOrConnectWithoutImobiInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type GeneroUpdateOneRequiredWithoutImobiNestedInput = {
    create?: XOR<GeneroCreateWithoutImobiInput, GeneroUncheckedCreateWithoutImobiInput>
    connectOrCreate?: GeneroCreateOrConnectWithoutImobiInput
    upsert?: GeneroUpsertWithoutImobiInput
    connect?: GeneroWhereUniqueInput
    update?: XOR<XOR<GeneroUpdateToOneWithWhereWithoutImobiInput, GeneroUpdateWithoutImobiInput>, GeneroUncheckedUpdateWithoutImobiInput>
  }

  export type UserUpdateOneRequiredWithoutImobiNestedInput = {
    create?: XOR<UserCreateWithoutImobiInput, UserUncheckedCreateWithoutImobiInput>
    connectOrCreate?: UserCreateOrConnectWithoutImobiInput
    upsert?: UserUpsertWithoutImobiInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutImobiInput, UserUpdateWithoutImobiInput>, UserUncheckedUpdateWithoutImobiInput>
  }

  export type UserCreateNestedManyWithoutGeneroInput = {
    create?: XOR<UserCreateWithoutGeneroInput, UserUncheckedCreateWithoutGeneroInput> | UserCreateWithoutGeneroInput[] | UserUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGeneroInput | UserCreateOrConnectWithoutGeneroInput[]
    createMany?: UserCreateManyGeneroInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ImobiCreateNestedManyWithoutGeneroInput = {
    create?: XOR<ImobiCreateWithoutGeneroInput, ImobiUncheckedCreateWithoutGeneroInput> | ImobiCreateWithoutGeneroInput[] | ImobiUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: ImobiCreateOrConnectWithoutGeneroInput | ImobiCreateOrConnectWithoutGeneroInput[]
    createMany?: ImobiCreateManyGeneroInputEnvelope
    connect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutGeneroInput = {
    create?: XOR<UserCreateWithoutGeneroInput, UserUncheckedCreateWithoutGeneroInput> | UserCreateWithoutGeneroInput[] | UserUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGeneroInput | UserCreateOrConnectWithoutGeneroInput[]
    createMany?: UserCreateManyGeneroInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ImobiUncheckedCreateNestedManyWithoutGeneroInput = {
    create?: XOR<ImobiCreateWithoutGeneroInput, ImobiUncheckedCreateWithoutGeneroInput> | ImobiCreateWithoutGeneroInput[] | ImobiUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: ImobiCreateOrConnectWithoutGeneroInput | ImobiCreateOrConnectWithoutGeneroInput[]
    createMany?: ImobiCreateManyGeneroInputEnvelope
    connect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutGeneroNestedInput = {
    create?: XOR<UserCreateWithoutGeneroInput, UserUncheckedCreateWithoutGeneroInput> | UserCreateWithoutGeneroInput[] | UserUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGeneroInput | UserCreateOrConnectWithoutGeneroInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGeneroInput | UserUpsertWithWhereUniqueWithoutGeneroInput[]
    createMany?: UserCreateManyGeneroInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGeneroInput | UserUpdateWithWhereUniqueWithoutGeneroInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGeneroInput | UserUpdateManyWithWhereWithoutGeneroInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ImobiUpdateManyWithoutGeneroNestedInput = {
    create?: XOR<ImobiCreateWithoutGeneroInput, ImobiUncheckedCreateWithoutGeneroInput> | ImobiCreateWithoutGeneroInput[] | ImobiUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: ImobiCreateOrConnectWithoutGeneroInput | ImobiCreateOrConnectWithoutGeneroInput[]
    upsert?: ImobiUpsertWithWhereUniqueWithoutGeneroInput | ImobiUpsertWithWhereUniqueWithoutGeneroInput[]
    createMany?: ImobiCreateManyGeneroInputEnvelope
    set?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    disconnect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    delete?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    connect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    update?: ImobiUpdateWithWhereUniqueWithoutGeneroInput | ImobiUpdateWithWhereUniqueWithoutGeneroInput[]
    updateMany?: ImobiUpdateManyWithWhereWithoutGeneroInput | ImobiUpdateManyWithWhereWithoutGeneroInput[]
    deleteMany?: ImobiScalarWhereInput | ImobiScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutGeneroNestedInput = {
    create?: XOR<UserCreateWithoutGeneroInput, UserUncheckedCreateWithoutGeneroInput> | UserCreateWithoutGeneroInput[] | UserUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: UserCreateOrConnectWithoutGeneroInput | UserCreateOrConnectWithoutGeneroInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutGeneroInput | UserUpsertWithWhereUniqueWithoutGeneroInput[]
    createMany?: UserCreateManyGeneroInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutGeneroInput | UserUpdateWithWhereUniqueWithoutGeneroInput[]
    updateMany?: UserUpdateManyWithWhereWithoutGeneroInput | UserUpdateManyWithWhereWithoutGeneroInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ImobiUncheckedUpdateManyWithoutGeneroNestedInput = {
    create?: XOR<ImobiCreateWithoutGeneroInput, ImobiUncheckedCreateWithoutGeneroInput> | ImobiCreateWithoutGeneroInput[] | ImobiUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: ImobiCreateOrConnectWithoutGeneroInput | ImobiCreateOrConnectWithoutGeneroInput[]
    upsert?: ImobiUpsertWithWhereUniqueWithoutGeneroInput | ImobiUpsertWithWhereUniqueWithoutGeneroInput[]
    createMany?: ImobiCreateManyGeneroInputEnvelope
    set?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    disconnect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    delete?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    connect?: ImobiWhereUniqueInput | ImobiWhereUniqueInput[]
    update?: ImobiUpdateWithWhereUniqueWithoutGeneroInput | ImobiUpdateWithWhereUniqueWithoutGeneroInput[]
    updateMany?: ImobiUpdateManyWithWhereWithoutGeneroInput | ImobiUpdateManyWithWhereWithoutGeneroInput[]
    deleteMany?: ImobiScalarWhereInput | ImobiScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMensagemInput = {
    create?: XOR<UserCreateWithoutMensagemInput, UserUncheckedCreateWithoutMensagemInput>
    connectOrCreate?: UserCreateOrConnectWithoutMensagemInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMensagemNestedInput = {
    create?: XOR<UserCreateWithoutMensagemInput, UserUncheckedCreateWithoutMensagemInput>
    connectOrCreate?: UserCreateOrConnectWithoutMensagemInput
    upsert?: UserUpsertWithoutMensagemInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMensagemInput, UserUpdateWithoutMensagemInput>, UserUncheckedUpdateWithoutMensagemInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type GeneroCreateWithoutUsersInput = {
    genero: string
    Imobi?: ImobiCreateNestedManyWithoutGeneroInput
  }

  export type GeneroUncheckedCreateWithoutUsersInput = {
    id_genero?: number
    genero: string
    Imobi?: ImobiUncheckedCreateNestedManyWithoutGeneroInput
  }

  export type GeneroCreateOrConnectWithoutUsersInput = {
    where: GeneroWhereUniqueInput
    create: XOR<GeneroCreateWithoutUsersInput, GeneroUncheckedCreateWithoutUsersInput>
  }

  export type ImobiCreateWithoutAuthorInput = {
    thumb?: string | null
    images?: string | null
    predio?: string | null
    description?: string | null
    price?: string | null
    cep?: string | null
    logradouro?: string | null
    bairro?: string | null
    numero?: string | null
    complemento?: string | null
    cidade?: string | null
    uf?: string | null
    area?: string | null
    bedrooms?: string | null
    bathrooms?: string | null
    name?: string | null
    phone?: string | null
    email?: string | null
    slug?: string | null
    created_at?: Date | string
    genero: GeneroCreateNestedOneWithoutImobiInput
  }

  export type ImobiUncheckedCreateWithoutAuthorInput = {
    id?: number
    thumb?: string | null
    images?: string | null
    predio?: string | null
    description?: string | null
    price?: string | null
    cep?: string | null
    logradouro?: string | null
    bairro?: string | null
    numero?: string | null
    complemento?: string | null
    cidade?: string | null
    uf?: string | null
    area?: string | null
    bedrooms?: string | null
    bathrooms?: string | null
    name?: string | null
    phone?: string | null
    email?: string | null
    generoId: number
    slug?: string | null
    created_at?: Date | string
  }

  export type ImobiCreateOrConnectWithoutAuthorInput = {
    where: ImobiWhereUniqueInput
    create: XOR<ImobiCreateWithoutAuthorInput, ImobiUncheckedCreateWithoutAuthorInput>
  }

  export type ImobiCreateManyAuthorInputEnvelope = {
    data: ImobiCreateManyAuthorInput | ImobiCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type MensagemCreateWithoutAuthorInput = {
    client_name: string
    client_email: string
    client_message: string
    client_telefone: string
  }

  export type MensagemUncheckedCreateWithoutAuthorInput = {
    id?: number
    client_name: string
    client_email: string
    client_message: string
    client_telefone: string
  }

  export type MensagemCreateOrConnectWithoutAuthorInput = {
    where: MensagemWhereUniqueInput
    create: XOR<MensagemCreateWithoutAuthorInput, MensagemUncheckedCreateWithoutAuthorInput>
  }

  export type MensagemCreateManyAuthorInputEnvelope = {
    data: MensagemCreateManyAuthorInput | MensagemCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type GeneroUpsertWithoutUsersInput = {
    update: XOR<GeneroUpdateWithoutUsersInput, GeneroUncheckedUpdateWithoutUsersInput>
    create: XOR<GeneroCreateWithoutUsersInput, GeneroUncheckedCreateWithoutUsersInput>
    where?: GeneroWhereInput
  }

  export type GeneroUpdateToOneWithWhereWithoutUsersInput = {
    where?: GeneroWhereInput
    data: XOR<GeneroUpdateWithoutUsersInput, GeneroUncheckedUpdateWithoutUsersInput>
  }

  export type GeneroUpdateWithoutUsersInput = {
    genero?: StringFieldUpdateOperationsInput | string
    Imobi?: ImobiUpdateManyWithoutGeneroNestedInput
  }

  export type GeneroUncheckedUpdateWithoutUsersInput = {
    id_genero?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    Imobi?: ImobiUncheckedUpdateManyWithoutGeneroNestedInput
  }

  export type ImobiUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ImobiWhereUniqueInput
    update: XOR<ImobiUpdateWithoutAuthorInput, ImobiUncheckedUpdateWithoutAuthorInput>
    create: XOR<ImobiCreateWithoutAuthorInput, ImobiUncheckedCreateWithoutAuthorInput>
  }

  export type ImobiUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ImobiWhereUniqueInput
    data: XOR<ImobiUpdateWithoutAuthorInput, ImobiUncheckedUpdateWithoutAuthorInput>
  }

  export type ImobiUpdateManyWithWhereWithoutAuthorInput = {
    where: ImobiScalarWhereInput
    data: XOR<ImobiUpdateManyMutationInput, ImobiUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ImobiScalarWhereInput = {
    AND?: ImobiScalarWhereInput | ImobiScalarWhereInput[]
    OR?: ImobiScalarWhereInput[]
    NOT?: ImobiScalarWhereInput | ImobiScalarWhereInput[]
    id?: IntFilter<"Imobi"> | number
    userId?: IntFilter<"Imobi"> | number
    thumb?: StringNullableFilter<"Imobi"> | string | null
    images?: StringNullableFilter<"Imobi"> | string | null
    predio?: StringNullableFilter<"Imobi"> | string | null
    description?: StringNullableFilter<"Imobi"> | string | null
    price?: StringNullableFilter<"Imobi"> | string | null
    cep?: StringNullableFilter<"Imobi"> | string | null
    logradouro?: StringNullableFilter<"Imobi"> | string | null
    bairro?: StringNullableFilter<"Imobi"> | string | null
    numero?: StringNullableFilter<"Imobi"> | string | null
    complemento?: StringNullableFilter<"Imobi"> | string | null
    cidade?: StringNullableFilter<"Imobi"> | string | null
    uf?: StringNullableFilter<"Imobi"> | string | null
    area?: StringNullableFilter<"Imobi"> | string | null
    bedrooms?: StringNullableFilter<"Imobi"> | string | null
    bathrooms?: StringNullableFilter<"Imobi"> | string | null
    name?: StringNullableFilter<"Imobi"> | string | null
    phone?: StringNullableFilter<"Imobi"> | string | null
    email?: StringNullableFilter<"Imobi"> | string | null
    generoId?: IntFilter<"Imobi"> | number
    slug?: StringNullableFilter<"Imobi"> | string | null
    created_at?: DateTimeFilter<"Imobi"> | Date | string
  }

  export type MensagemUpsertWithWhereUniqueWithoutAuthorInput = {
    where: MensagemWhereUniqueInput
    update: XOR<MensagemUpdateWithoutAuthorInput, MensagemUncheckedUpdateWithoutAuthorInput>
    create: XOR<MensagemCreateWithoutAuthorInput, MensagemUncheckedCreateWithoutAuthorInput>
  }

  export type MensagemUpdateWithWhereUniqueWithoutAuthorInput = {
    where: MensagemWhereUniqueInput
    data: XOR<MensagemUpdateWithoutAuthorInput, MensagemUncheckedUpdateWithoutAuthorInput>
  }

  export type MensagemUpdateManyWithWhereWithoutAuthorInput = {
    where: MensagemScalarWhereInput
    data: XOR<MensagemUpdateManyMutationInput, MensagemUncheckedUpdateManyWithoutAuthorInput>
  }

  export type MensagemScalarWhereInput = {
    AND?: MensagemScalarWhereInput | MensagemScalarWhereInput[]
    OR?: MensagemScalarWhereInput[]
    NOT?: MensagemScalarWhereInput | MensagemScalarWhereInput[]
    id?: IntFilter<"Mensagem"> | number
    client_name?: StringFilter<"Mensagem"> | string
    client_email?: StringFilter<"Mensagem"> | string
    client_message?: StringFilter<"Mensagem"> | string
    client_telefone?: StringFilter<"Mensagem"> | string
    userId?: IntFilter<"Mensagem"> | number
  }

  export type GeneroCreateWithoutImobiInput = {
    genero: string
    users?: UserCreateNestedManyWithoutGeneroInput
  }

  export type GeneroUncheckedCreateWithoutImobiInput = {
    id_genero?: number
    genero: string
    users?: UserUncheckedCreateNestedManyWithoutGeneroInput
  }

  export type GeneroCreateOrConnectWithoutImobiInput = {
    where: GeneroWhereUniqueInput
    create: XOR<GeneroCreateWithoutImobiInput, GeneroUncheckedCreateWithoutImobiInput>
  }

  export type UserCreateWithoutImobiInput = {
    name: string
    cpf: string
    birthdate: Date | string
    email: string
    password: string
    genero: GeneroCreateNestedOneWithoutUsersInput
    mensagem?: MensagemCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutImobiInput = {
    id?: number
    name: string
    cpf: string
    birthdate: Date | string
    generoId: number
    email: string
    password: string
    mensagem?: MensagemUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutImobiInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutImobiInput, UserUncheckedCreateWithoutImobiInput>
  }

  export type GeneroUpsertWithoutImobiInput = {
    update: XOR<GeneroUpdateWithoutImobiInput, GeneroUncheckedUpdateWithoutImobiInput>
    create: XOR<GeneroCreateWithoutImobiInput, GeneroUncheckedCreateWithoutImobiInput>
    where?: GeneroWhereInput
  }

  export type GeneroUpdateToOneWithWhereWithoutImobiInput = {
    where?: GeneroWhereInput
    data: XOR<GeneroUpdateWithoutImobiInput, GeneroUncheckedUpdateWithoutImobiInput>
  }

  export type GeneroUpdateWithoutImobiInput = {
    genero?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutGeneroNestedInput
  }

  export type GeneroUncheckedUpdateWithoutImobiInput = {
    id_genero?: IntFieldUpdateOperationsInput | number
    genero?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutGeneroNestedInput
  }

  export type UserUpsertWithoutImobiInput = {
    update: XOR<UserUpdateWithoutImobiInput, UserUncheckedUpdateWithoutImobiInput>
    create: XOR<UserCreateWithoutImobiInput, UserUncheckedCreateWithoutImobiInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutImobiInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutImobiInput, UserUncheckedUpdateWithoutImobiInput>
  }

  export type UserUpdateWithoutImobiInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    genero?: GeneroUpdateOneRequiredWithoutUsersNestedInput
    mensagem?: MensagemUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutImobiInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    generoId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    mensagem?: MensagemUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateWithoutGeneroInput = {
    name: string
    cpf: string
    birthdate: Date | string
    email: string
    password: string
    imobi?: ImobiCreateNestedManyWithoutAuthorInput
    mensagem?: MensagemCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutGeneroInput = {
    id?: number
    name: string
    cpf: string
    birthdate: Date | string
    email: string
    password: string
    imobi?: ImobiUncheckedCreateNestedManyWithoutAuthorInput
    mensagem?: MensagemUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutGeneroInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGeneroInput, UserUncheckedCreateWithoutGeneroInput>
  }

  export type UserCreateManyGeneroInputEnvelope = {
    data: UserCreateManyGeneroInput | UserCreateManyGeneroInput[]
    skipDuplicates?: boolean
  }

  export type ImobiCreateWithoutGeneroInput = {
    thumb?: string | null
    images?: string | null
    predio?: string | null
    description?: string | null
    price?: string | null
    cep?: string | null
    logradouro?: string | null
    bairro?: string | null
    numero?: string | null
    complemento?: string | null
    cidade?: string | null
    uf?: string | null
    area?: string | null
    bedrooms?: string | null
    bathrooms?: string | null
    name?: string | null
    phone?: string | null
    email?: string | null
    slug?: string | null
    created_at?: Date | string
    author: UserCreateNestedOneWithoutImobiInput
  }

  export type ImobiUncheckedCreateWithoutGeneroInput = {
    id?: number
    userId: number
    thumb?: string | null
    images?: string | null
    predio?: string | null
    description?: string | null
    price?: string | null
    cep?: string | null
    logradouro?: string | null
    bairro?: string | null
    numero?: string | null
    complemento?: string | null
    cidade?: string | null
    uf?: string | null
    area?: string | null
    bedrooms?: string | null
    bathrooms?: string | null
    name?: string | null
    phone?: string | null
    email?: string | null
    slug?: string | null
    created_at?: Date | string
  }

  export type ImobiCreateOrConnectWithoutGeneroInput = {
    where: ImobiWhereUniqueInput
    create: XOR<ImobiCreateWithoutGeneroInput, ImobiUncheckedCreateWithoutGeneroInput>
  }

  export type ImobiCreateManyGeneroInputEnvelope = {
    data: ImobiCreateManyGeneroInput | ImobiCreateManyGeneroInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutGeneroInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutGeneroInput, UserUncheckedUpdateWithoutGeneroInput>
    create: XOR<UserCreateWithoutGeneroInput, UserUncheckedCreateWithoutGeneroInput>
  }

  export type UserUpdateWithWhereUniqueWithoutGeneroInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutGeneroInput, UserUncheckedUpdateWithoutGeneroInput>
  }

  export type UserUpdateManyWithWhereWithoutGeneroInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutGeneroInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    cpf?: StringFilter<"User"> | string
    birthdate?: DateTimeFilter<"User"> | Date | string
    generoId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
  }

  export type ImobiUpsertWithWhereUniqueWithoutGeneroInput = {
    where: ImobiWhereUniqueInput
    update: XOR<ImobiUpdateWithoutGeneroInput, ImobiUncheckedUpdateWithoutGeneroInput>
    create: XOR<ImobiCreateWithoutGeneroInput, ImobiUncheckedCreateWithoutGeneroInput>
  }

  export type ImobiUpdateWithWhereUniqueWithoutGeneroInput = {
    where: ImobiWhereUniqueInput
    data: XOR<ImobiUpdateWithoutGeneroInput, ImobiUncheckedUpdateWithoutGeneroInput>
  }

  export type ImobiUpdateManyWithWhereWithoutGeneroInput = {
    where: ImobiScalarWhereInput
    data: XOR<ImobiUpdateManyMutationInput, ImobiUncheckedUpdateManyWithoutGeneroInput>
  }

  export type UserCreateWithoutMensagemInput = {
    name: string
    cpf: string
    birthdate: Date | string
    email: string
    password: string
    genero: GeneroCreateNestedOneWithoutUsersInput
    imobi?: ImobiCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutMensagemInput = {
    id?: number
    name: string
    cpf: string
    birthdate: Date | string
    generoId: number
    email: string
    password: string
    imobi?: ImobiUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutMensagemInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMensagemInput, UserUncheckedCreateWithoutMensagemInput>
  }

  export type UserUpsertWithoutMensagemInput = {
    update: XOR<UserUpdateWithoutMensagemInput, UserUncheckedUpdateWithoutMensagemInput>
    create: XOR<UserCreateWithoutMensagemInput, UserUncheckedCreateWithoutMensagemInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMensagemInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMensagemInput, UserUncheckedUpdateWithoutMensagemInput>
  }

  export type UserUpdateWithoutMensagemInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    genero?: GeneroUpdateOneRequiredWithoutUsersNestedInput
    imobi?: ImobiUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutMensagemInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    generoId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imobi?: ImobiUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type ImobiCreateManyAuthorInput = {
    id?: number
    thumb?: string | null
    images?: string | null
    predio?: string | null
    description?: string | null
    price?: string | null
    cep?: string | null
    logradouro?: string | null
    bairro?: string | null
    numero?: string | null
    complemento?: string | null
    cidade?: string | null
    uf?: string | null
    area?: string | null
    bedrooms?: string | null
    bathrooms?: string | null
    name?: string | null
    phone?: string | null
    email?: string | null
    generoId: number
    slug?: string | null
    created_at?: Date | string
  }

  export type MensagemCreateManyAuthorInput = {
    id?: number
    client_name: string
    client_email: string
    client_message: string
    client_telefone: string
  }

  export type ImobiUpdateWithoutAuthorInput = {
    thumb?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    predio?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    logradouro?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    uf?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableStringFieldUpdateOperationsInput | string | null
    bathrooms?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: GeneroUpdateOneRequiredWithoutImobiNestedInput
  }

  export type ImobiUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    thumb?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    predio?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    logradouro?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    uf?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableStringFieldUpdateOperationsInput | string | null
    bathrooms?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    generoId?: IntFieldUpdateOperationsInput | number
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImobiUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    thumb?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    predio?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    logradouro?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    uf?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableStringFieldUpdateOperationsInput | string | null
    bathrooms?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    generoId?: IntFieldUpdateOperationsInput | number
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensagemUpdateWithoutAuthorInput = {
    client_name?: StringFieldUpdateOperationsInput | string
    client_email?: StringFieldUpdateOperationsInput | string
    client_message?: StringFieldUpdateOperationsInput | string
    client_telefone?: StringFieldUpdateOperationsInput | string
  }

  export type MensagemUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    client_name?: StringFieldUpdateOperationsInput | string
    client_email?: StringFieldUpdateOperationsInput | string
    client_message?: StringFieldUpdateOperationsInput | string
    client_telefone?: StringFieldUpdateOperationsInput | string
  }

  export type MensagemUncheckedUpdateManyWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    client_name?: StringFieldUpdateOperationsInput | string
    client_email?: StringFieldUpdateOperationsInput | string
    client_message?: StringFieldUpdateOperationsInput | string
    client_telefone?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyGeneroInput = {
    id?: number
    name: string
    cpf: string
    birthdate: Date | string
    email: string
    password: string
  }

  export type ImobiCreateManyGeneroInput = {
    id?: number
    userId: number
    thumb?: string | null
    images?: string | null
    predio?: string | null
    description?: string | null
    price?: string | null
    cep?: string | null
    logradouro?: string | null
    bairro?: string | null
    numero?: string | null
    complemento?: string | null
    cidade?: string | null
    uf?: string | null
    area?: string | null
    bedrooms?: string | null
    bathrooms?: string | null
    name?: string | null
    phone?: string | null
    email?: string | null
    slug?: string | null
    created_at?: Date | string
  }

  export type UserUpdateWithoutGeneroInput = {
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imobi?: ImobiUpdateManyWithoutAuthorNestedInput
    mensagem?: MensagemUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutGeneroInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imobi?: ImobiUncheckedUpdateManyWithoutAuthorNestedInput
    mensagem?: MensagemUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateManyWithoutGeneroInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ImobiUpdateWithoutGeneroInput = {
    thumb?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    predio?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    logradouro?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    uf?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableStringFieldUpdateOperationsInput | string | null
    bathrooms?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutImobiNestedInput
  }

  export type ImobiUncheckedUpdateWithoutGeneroInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    thumb?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    predio?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    logradouro?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    uf?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableStringFieldUpdateOperationsInput | string | null
    bathrooms?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImobiUncheckedUpdateManyWithoutGeneroInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    thumb?: NullableStringFieldUpdateOperationsInput | string | null
    images?: NullableStringFieldUpdateOperationsInput | string | null
    predio?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableStringFieldUpdateOperationsInput | string | null
    logradouro?: NullableStringFieldUpdateOperationsInput | string | null
    bairro?: NullableStringFieldUpdateOperationsInput | string | null
    numero?: NullableStringFieldUpdateOperationsInput | string | null
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    cidade?: NullableStringFieldUpdateOperationsInput | string | null
    uf?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableStringFieldUpdateOperationsInput | string | null
    bathrooms?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GeneroCountOutputTypeDefaultArgs instead
     */
    export type GeneroCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneroCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImobiDefaultArgs instead
     */
    export type ImobiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImobiDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GeneroDefaultArgs instead
     */
    export type GeneroArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GeneroDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MensagemDefaultArgs instead
     */
    export type MensagemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MensagemDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}